name: TreeMapper CD

permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: true
      publish_to_pypi:
        description: 'Publish to PyPI'
        required: true
        default: 'false'
        type: choice
        options:
        - 'true'
        - 'false'

jobs:
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .

      - name: Set version
        run: |
          sed -i 's/__version__ = ".*"/__version__ = "${{ github.event.inputs.version }}"/' src/treemapper/version.py

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.event.inputs.version }}
          release_name: Release ${{ github.event.inputs.version }}
          draft: false
          prerelease: false
          body: "Release ${{ github.event.inputs.version }}"

    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ github.event.inputs.version }}
      release_id: ${{ steps.create_release.outputs.id }}

  build-and-upload:
    name: Build and Upload Assets
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.cfg') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .

      - name: Set version
        run: |
          sed -i 's/__version__ = ".*"/__version__ = "${{ github.event.inputs.version }}"/' src/treemapper/version.py

      - name: Build with PyInstaller
        run: |
          python -m PyInstaller --clean -y --dist ./dist/${{ matrix.os }} --workpath /tmp treemapper.spec

      - name: Prepare asset for Windows
        if: matrix.os == 'windows-latest'
        run: |
          mv ./dist/${{ matrix.os }}/treemapper.exe ./dist/${{ matrix.os }}/treemapper-${{ github.event.inputs.version }}-win.exe

      - name: Prepare asset for macOS
        if: matrix.os == 'macos-latest'
        run: |
          mv ./dist/${{ matrix.os }}/TreeMapper.app ./dist/${{ matrix.os }}/TreeMapper-${{ github.event.inputs.version }}.app

      - name: Prepare asset for Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          mv ./dist/${{ matrix.os }}/treemapper ./dist/${{ matrix.os }}/treemapper-${{ github.event.inputs.version }}-linux

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ matrix.os == 'windows-latest' && './dist/windows-latest/treemapper-${{ github.event.inputs.version }}-win.exe' || matrix.os == 'macos-latest' && './dist/macos-latest/TreeMapper-${{ github.event.inputs.version }}.app' || './dist/ubuntu-latest/treemapper-${{ github.event.inputs.version }}-linux' }}
          asset_name: ${{ matrix.os == 'windows-latest' && 'treemapper-${{ github.event.inputs.version }}-win.exe' || matrix.os == 'macos-latest' && 'TreeMapper-${{ github.event.inputs.version }}.app' || 'treemapper-${{ github.event.inputs.version }}-linux' }}
          asset_content_type: ${{ matrix.os == 'macos-latest' && 'application/x-apple-diskimage' || 'application/octet-stream' }}

  publish-to-pypi:
    name: Publish to PyPI
    needs: [create-release, build-and-upload]
    if: github.event.inputs.publish_to_pypi == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.cfg') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set version
        run: |
          sed -i 's/__version__ = ".*"/__version__ = "${{ github.event.inputs.version }}"/' src/treemapper/version.py

      - name: Build and Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          python -m build
          python -m twine upload dist/* --verbose

      - name: Update Release Description
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.name,
              release_id: ${{ needs.create-release.outputs.release_id }},
              body: 'Release ${{ github.event.inputs.version }}\n\nPyPI: https://pypi.org/project/treemapper/${{ github.event.inputs.version }}/'
            })

  update-main-branch:
    name: Update main branch
    needs: [publish-to-pypi]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v3
        with:
          ref: main
          fetch-depth: 0

      - name: Merge tag into main
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git merge ${{ github.ref }} --no-ff -m "Merge tag ${{ github.ref_name }} into main"
          git push origin main
